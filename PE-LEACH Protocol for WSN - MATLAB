% PE-LEACH Protocol Implementation

% Network parameters
n = 100;          % Number of nodes
xm = 100;         % X dimension of the field
ym = 100;         % Y dimension of the field
sink.x = 50;      % X coordinate of the base station
sink.y = 50;      % Y coordinate of the base station
p = 0.1;          % Probability of becoming a cluster head
Eo = 0.5;         % Initial energy of each node (J)
ETX = 50*0.000000001; % Transmission energy per bit (J)
ERX = 50*0.000000001; % Reception energy per bit (J)
Efs = 10*0.000000000001; % Free space model coefficient
Emp = 0.0013*0.000000000001; % Multi-path model coefficient
EDA = 5*0.000000001; % Data aggregation energy (J)
k = 4000;         % Data packet size (bits)
rmax = 100;       % Maximum number of rounds

% Calculate threshold distance
do = sqrt(Efs/Emp);

% Node initialization
S = struct('xd', {}, 'yd', {}, 'E', {}, 'type', {}, 'ENERGY', {});
for i = 1:n
    S(i).xd = rand(1,1)*xm;
    S(i).yd = rand(1,1)*ym;
    S(i).E = Eo;
    S(i).type = 'N'; % N = normal node
    S(i).ENERGY = 0;
end

% Preallocate arrays for statistics
rounds = 1:rmax;
alive_nodes = zeros(1, rmax);
ch_count = zeros(1, rmax);

% Main simulation loop
for r = 1:rmax
    % Reset node types and ENERGY
    for i = 1:n
        S(i).type = 'N';
        S(i).ENERGY = 0;
    end
    
    % Cluster Head Selection
    for i = 1:n
        if S(i).E > 0
            temp_rand = rand;
            if temp_rand <= p/(1-p*mod(r,round(1/p)))
                S(i).type = 'C'; % C = cluster head
                S(i).ENERGY = S(i).E / Eo; % Normalized remaining energy
            end
        end
    end
    
    % Cluster Formation
    for i = 1:n
        if S(i).type == 'N' && S(i).E > 0
            min_dis = inf;
            min_dis_cluster = 0;
            for j = 1:n
                if S(j).type == 'C'
                    temp_dis = sqrt((S(i).xd-S(j).xd)^2 + (S(i).yd-S(j).yd)^2);
                    if temp_dis < min_dis
                        min_dis = temp_dis;
                        min_dis_cluster = j;
                    end
                end
            end
            if min_dis_cluster ~= 0
                S(i).cluster = min_dis_cluster;
            end
        end
    end
    
    % Data Transmission
    for i = 1:n
        if S(i).E > 0
            if S(i).type == 'N'
                % Transmit to cluster head
                distance = sqrt((S(i).xd-S(S(i).cluster).xd)^2 + (S(i).yd-S(S(i).cluster).yd)^2);
                if distance > do
                    S(i).E = S(i).E - (ETX*k + Emp*k*(distance^4));
                else
                    S(i).E = S(i).E - (ETX*k + Efs*k*(distance^2));
                end
                % Cluster head receives
                S(S(i).cluster).E = S(S(i).cluster).E - ERX*k;
            elseif S(i).type == 'C'
                % Aggregate data
                S(i).E = S(i).E - EDA*k;
                % Transmit to base station
                distance = sqrt((S(i).xd-sink.x)^2 + (S(i).yd-sink.y)^2);
                if distance > do
                    S(i).E = S(i).E - (ETX*k + Emp*k*(distance^4));
                else
                    S(i).E = S(i).E - (ETX*k + Efs*k*(distance^2));
                end
            end
        end
    end
    
    % Count alive nodes and cluster heads
    alive = 0;
    cluster_heads = 0;
    for i = 1:n
        if S(i).E > 0
            alive = alive + 1;
            if S(i).type == 'C'
                cluster_heads = cluster_heads + 1;
            end
        end
    end
    
    % Store statistics
    alive_nodes(r) = alive;
    ch_count(r) = cluster_heads;
end

% Plot results
figure(1);
plot(rounds, alive_nodes, 'b-');
xlabel('Round');
ylabel('Number of Alive Nodes');
title('Network Lifetime');

figure(2);
plot(rounds, ch_count, 'r-');
xlabel('Round');
ylabel('Number of Cluster Heads');
title('Cluster Head Count per Round');
