function energyConsumptionComparison()
    % Network parameters
    numNodes = 50;
    area = 100; % 100x100 area
    initialEnergy = 0.5; % Joules
    
    % Create topologies
    meshNetwork = createMeshTopology(numNodes, area);
    starNetwork = createStarTopology(numNodes, area);
    treeNetwork = createTreeTopology(numNodes, area);
    graphNetwork = createGraphTopology(numNodes, area);
    
    % Simulate energy consumption
    numRounds = 1000;
    meshEnergy = simulateEnergyConsumption(meshNetwork, initialEnergy, numRounds);
    starEnergy = simulateEnergyConsumption(starNetwork, initialEnergy, numRounds);
    treeEnergy = simulateEnergyConsumption(treeNetwork, initialEnergy, numRounds);
    graphEnergy = simulateEnergyConsumption(graphNetwork, initialEnergy, numRounds);
    
    % Plot results
    plotResults(meshEnergy, starEnergy, treeEnergy, graphEnergy, numRounds);
end

function topology = createMeshTopology(numNodes, area)
    topology = struct('nodes', zeros(numNodes, 2), 'connections', zeros(numNodes));
    for i = 1:numNodes
        topology.nodes(i, :) = [rand() * area, rand() * area];
    end
    for i = 1:numNodes
        for j = i+1:numNodes
            if rand() < 0.3 % 30% chance of connection
                topology.connections(i, j) = 1;
                topology.connections(j, i) = 1;
            end
        end
    end
end

function topology = createStarTopology(numNodes, area)
    topology = struct('nodes', zeros(numNodes, 2), 'connections', zeros(numNodes));
    % Place central node
    topology.nodes(1, :) = [area/2, area/2];
    for i = 2:numNodes
        topology.nodes(i, :) = [rand() * area, rand() * area];
        topology.connections(1, i) = 1;
        topology.connections(i, 1) = 1;
    end
end

function topology = createTreeTopology(numNodes, area)
    topology = struct('nodes', zeros(numNodes, 2), 'connections', zeros(numNodes));
    for i = 1:numNodes
        topology.nodes(i, :) = [rand() * area, rand() * area];
    end
    for i = 2:numNodes
        parent = floor(i/2);
        topology.connections(parent, i) = 1;
        topology.connections(i, parent) = 1;
    end
end

function topology = createGraphTopology(numNodes, area)
    topology = struct('nodes', zeros(numNodes, 2), 'connections', zeros(numNodes));
    for i = 1:numNodes
        topology.nodes(i, :) = [rand() * area, rand() * area];
    end
    for i = 1:numNodes
        for j = i+1:numNodes
            if rand() < 0.1 % 10% chance of connection
                topology.connections(i, j) = 1;
                topology.connections(j, i) = 1;
            end
        end
    end
end

function energyLevels = simulateEnergyConsumption(topology, initialEnergy, numRounds)
    numNodes = size(topology.nodes, 1);
    energyLevels = zeros(numNodes, numRounds);
    currentEnergy = ones(numNodes, 1) * initialEnergy;
    
    for round = 1:numRounds
        % Simulate data transmission
        for i = 1:numNodes
            connectedNodes = find(topology.connections(i, :));
            if ~isempty(connectedNodes)
                % Energy consumed in transmission
                energyConsumed = 0.00005 * length(connectedNodes);
                currentEnergy(i) = max(0, currentEnergy(i) - energyConsumed);
                
                % Energy consumed in reception by connected nodes
                for j = connectedNodes
                    currentEnergy(j) = max(0, currentEnergy(j) - 0.00002);
                end
            end
        end
        energyLevels(:, round) = currentEnergy;
    end
end

function plotResults(meshEnergy, starEnergy, treeEnergy, graphEnergy, numRounds)
    figure;
    plot(1:numRounds, mean(meshEnergy), 'r-', ...
         1:numRounds, mean(starEnergy), 'g-', ...
         1:numRounds, mean(treeEnergy), 'b-', ...
         1:numRounds, mean(graphEnergy), 'k-');
    xlabel('Rounds');
    ylabel('Average Energy (J)');
    title('Energy Consumption Comparison of WSN Topologies');
    legend('MESH', 'STAR', 'TREE', 'GRAPH');
    grid on;
end
